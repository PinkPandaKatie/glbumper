This is a portals-based 3D engine, similar to the Build engine which
powers Duke Nukem 3D. Although no Build engine code is used, there is
a converter script which generates worlds from Build maps, and for the
most part the engine uses the same terminology. 

The playing area is split into "sectors", which are just arbitrary
polygons with a ceiling and floor. The lines of the polygon represent
vertical walls. For example, a sector with 3 walls and a flat ceiling
and floor is a vertical triangular prism. Ceilings and floors can be
any arbitrary plane except vertical, although the Build map format
limits this somewhat.

Each wall can have an arbitrary number of "links" to other
sectors. Whenever an object crosses a wall that has links, the engine
chooses a link based on the Z coordinate. Therefore, each link must
have a well-defined range on the Z axis. If there is any overlap
between adjacent sectors, the engine will get very confused.
The Build engine restricts the number of links to one, which
limits the flexibility of the maps. This engine (and the Build engine)
requires that two sectors that are linked be physically adjacent in 2D
space (so you can't use links to teleport). You can, however, use glue
markers to move sectors around when you convert from Build format.

The Build engine restricts the number of links to one, so various
tricks must be used to exploit the full potential of the world format
when converting. The simplest way is to use glue markers to move
sectors around and manually link walls. The second is to use bridges,
which requires you to define the bridges in a separate file.

Sectors can overlap in 3D space as long as no two overlapping sectors
are visible at the same time. In the Build engine this applies to
sectors that overlap even in 2D space, but since this engine uses
OpenGL, that restriction does not apply.

"Actors" are objects which can be clipped to the world and other
actors. Unlike sectors and walls, the Actor class is an abstract base
class. Actors are clipped to the world as cylinders. The size of an
actor's clipping cylinder is determined by the "rad" and "height"
attributes. The height is actually half of the height of the clipping
cylinder; it is the distance from the center to the top and bottom of
the cylinder.

Actors roughly correspond to "sprites" in the Build engine. The term
"sprite" didn't seem appropriate because actors may or may not be
drawn as sprites.

