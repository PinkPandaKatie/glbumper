void SMDPConnectionManager::__gc_traverse_members(visitproc _visit, void* _data) {
    for(set<sptr<SMDPConnection> >::iterator _itr1 = (connections).begin(); _itr1 != (connections).end(); ++_itr1) {
        _visit(*_itr1, _data);
    }
}

void SMDPConnectionManager::__gc_clear_members() throw() {
    connections.clear();
}

void SMDPConnectionManager::__gc_traverse(visitproc _visit, void* _data) {
    SMDPConnectionManager::__gc_traverse_members(_visit, _data);
}

void SMDPConnectionManager::__gc_clear() throw() {
    SMDPConnectionManager::__gc_clear_members();
}

bool SMDPConnectionManager::__gc_needtrack() throw() {
    return true;
}

string SMDPConnectionManager::classname() const throw() { return "SMDPConnectionManager"; }

