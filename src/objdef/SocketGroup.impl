void SocketGroup::__gc_traverse_members(visitproc _visit, void* _data) {
    for(set<sptr<Socket> >::iterator _itr1 = (socks).begin(); _itr1 != (socks).end(); ++_itr1) {
        _visit(*_itr1, _data);
    }
}

void SocketGroup::__gc_clear_members() throw() {
    socks.clear();
}

void SocketGroup::__gc_traverse(visitproc _visit, void* _data) {
    SocketGroup::__gc_traverse_members(_visit, _data);
    Thread::__gc_traverse_members(_visit, _data);
}

void SocketGroup::__gc_clear() throw() {
    SocketGroup::__gc_clear_members();
    Thread::__gc_clear_members();
}

bool SocketGroup::__gc_needtrack() throw() {
    return true;
}

string SocketGroup::classname() const throw() { return "SocketGroup"; }

