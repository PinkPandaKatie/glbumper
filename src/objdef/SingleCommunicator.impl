void SingleCommunicator::__gc_traverse_members(visitproc _visit, void* _data) {
}

void SingleCommunicator::__gc_clear_members() throw() {
}

void SingleCommunicator::__gc_traverse(visitproc _visit, void* _data) {
    SingleCommunicator::__gc_traverse_members(_visit, _data);
    Communicator::__gc_traverse_members(_visit, _data);
}

void SingleCommunicator::__gc_clear() throw() {
    SingleCommunicator::__gc_clear_members();
    Communicator::__gc_clear_members();
}

bool SingleCommunicator::__gc_needtrack() throw() {
    return true;
}

string SingleCommunicator::classname() const throw() { return "SingleCommunicator"; }

